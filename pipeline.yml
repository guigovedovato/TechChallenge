# Azure DevOps Pipeline para CI de uma aplicação .NET 8 com Docker

trigger:
  - main
pr:
  - main

variables:
  buildConfiguration: "Release"
  imageRepository: "fcg129"
  dockerfilePath: "$(Build.SourcesDirectory)/Dockerfile"
  tag: "$(Build.BuildId)"

pool:
  vmImage: "ubuntu-latest"

stages:
  - stage: Build
    displayName: "Construir a aplicação"
    jobs:
      - job: Build
        steps:
          - task: UseDotNet@2
            displayName: "Instalar .NET 8 SDK"
            inputs:
              version: "8.x"

          - task: DotNetCoreCLI@2
            displayName: "Restaurar pacotes NuGet"
            inputs:
              command: "restore"
              projects: "**/*.csproj"

          - task: DotNetCoreCLI@2
            displayName: "Compilar aplicação - $(buildConfiguration)"
            inputs:
              command: "build"
              projects: "**/*.csproj"
              arguments: "--no-restore --configuration $(buildConfiguration)"

          - task: DotNetCoreCLI@2
            displayName: "Executar testes unitários"
            inputs:
              command: "test"
              projects: "**/FCG.Application.Tests.csproj"
              arguments: '--configuration $(buildConfiguration) --no-build --collect "Code Coverage"'
              publishTestResults: true

          - publish: "$(Build.ArtifactStagingDirectory)"
            artifact: "drop"

  - stage: Docker
    displayName: "Construir e publicar imagem Docker"
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: Docker
        steps:
          - task: Docker@2
            displayName: "Construir imagem Docker"
            condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
            inputs:
              containerRegistry: "$(dockerRegistryServiceConnection)"
              repository: "$(imageRepository)"
              command: "build"
              Dockerfile: "$(dockerfilePath)"
              tags: |
                $(tag)
                latest

          - task: Docker@2
            displayName: "Publicar imagem Docker"
            condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
            inputs:
              containerRegistry: "$(dockerRegistryServiceConnection)"
              repository: "$(imageRepository)"
              command: "push"
              tags: |
                $(tag)
                latest

  - stage: Deploy
    displayName: "Implantar aplicação"
    dependsOn: Docker
    condition: succeeded()
    jobs:
      - deployment: Deploy
        displayName: "Implantar em ambiente de produção"
        environment: "Production"
        strategy:
          runOnce:
            deploy:
              steps:
                - script: echo "Publicando imagem Docker $(imageRepository):$(tag) no ambiente de produção"
                  displayName: "Deploy da aplicação"
